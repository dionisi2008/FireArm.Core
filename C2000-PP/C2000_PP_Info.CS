using System.ComponentModel;
using System.Net;
using System.Net.Sockets;


namespace C2000_PP
{
    public class C2000_PP_Info : NetConnect
    {


        protected Int16 Max_Relay { get; set; }
        protected Int16 Max_Zone { get; set; }
        protected Int16 Max_Razdels { get; set; }
        protected Int16 Max_State_Zone { get; set; }
        protected Int16 Max_State_Razdel { get; set; }
        protected Int16 Max_Size_Event { get; set; }
        protected Int16 max_event_description_length { get; set; }

        protected string DevicesType;
        protected Int16 DevicesVersion;

        public enum States
        {
            Восстановление_сети_220_В = 1,
            Авария_сети_220_В = 2,
            Тревога_проникновения = 3,
            Помеха_Повышение_сигнала_в_измерительном_канале_датчика_но_меньше_уровня_тревоги = 4,
            Отключение_звука_Оператор_подтвердил_получение_тревожного_извещения = 5,
            Помеха_устранена_144 = 6,
            Ручное_включение_исполнительного_устройства = 7,
            Ручное_выключение_исполнительного_устройства = 8,
            Активация_УДП = 9,
            Восстановление_УДП = 10,
            Подбор_кода = 14,
            Дверь_открыта = 15,
            Неудачное_взятие = 17,
            Предъявлен_код_принуждения_Предъявлен_код_принуждения = 18,
            Тест = 19,
            Вход_в_режим_тестирования = 20,
            Выход_из_режима_тестирования = 21,
            Восстановление_контроля = 22,
            Задержка_взятия = 23,
            Взятие_входа_на_охрану = 24,
            Доступ_закрыт = 25,
            Доступ_отклонен = 26,
            Дверь_взломана = 27,
            Доступ_предоставлен = 28,
            Запрет_доступа = 29,
            Восстановление_доступа = 30,
            Дверь_закрыта = 31,
            Проход = 32,
            Дверь_заблокирована = 33,
            Идентификация_1_Пользователь_ввёл_код_для_управления_например_для_постановки_на_охрану_или_снятия_с_охраны = 34,
            Восстановление_технологического_входа = 35,
            Нарушение_технологического_входа = 36,
            Пожар = 37,
            Нарушение_2_го_технологического_входа = 38,
            Восстановление_нормы_оборудования = 39,
            Пожар_2 = 40,
            Неисправность_оборудования = 41,
            Неизвестное_устройство_103 = 42,
            Предупреждение = 43,
            Внимание = 44,
            Обрыв_входа = 45,
            Обрыв_ДПЛС = 46,
            Восстановление_ДПЛС = 47,
            Сработка_2_го_датчика_Сработка_2_го_извещателя_в_пожарном_ШС = 48,
            Тихая_тревога = 58,
            Сброс_конфигурации_Конфигурация_прибора_сброшена_на_значения_по_умолчанию = 61,
            Изменение_конфигурации_Конфигурация_прибора_изменена = 62,
            Изменение_даты_126 = 67,
            Журнал_заполнен_Память_журнала_событий_достигла_верхнего_уровня = 69,
            Журнал_переполнен_Произошла_потеря_событий_от_переполнения = 70,
            Понижение_уровня = 71,
            Норма_уровня = 72,
            Изменение_времени_123 = 73,
            Повышение_уровня = 74,
            Аварийное_повышение_уровня = 75,
            Повышение_температуры = 76,
            Аварийное_понижение_уровня = 77,
            Температура_в_норме = 78,
            Тревога_затопления = 79,
            Восстановление_датчика_затопления = 80,
            Неисправность_термометра = 82,
            Восстановление_термометра = 83,
            Начало_локального_программирования = 84,
            Снятие_входа_с_охраны = 109,
            Тревога_сброшена = 110,
            Включение_ШС = 111,
            Отключение_ШС = 112,
            Включение_выхода = 113,
            Отключение_выхода = 114,
            Восстановление_снятого_входа = 117,
            Тревога_входа = 118,
            Нарушение_снятого_входа = 119,
            Обрыв_выхода_Обрыв_цепи_нагрузки_релейного_выхода = 121,
            КЗ_выхода_Короткое_замыкание_цепи_нагрузки_релейного_выхода = 122,
            Восстановление_выхода_Восстановление_релейного_выхода = 123,
            Потеря_связи_с_выходом = 126,
            Восстановление_связи_с_выходом = 127,
            Изменение_состояния_выхода = 128,
            Включение_насоса_182 = 130,
            Выключение_насоса = 131,
            Ошибка_при_автоматическом_тестировании = 135,
            Пуск_Срабатывание_цепи_пуска = 137,
            Неудачный_пуск_Ошибка_активации_выхода = 138,
            Неудачный_пуск_пожаротушения = 139,
            Тест_Запуск_внутреннего_теста = 140,
            Задержка_пуска_АУП = 141,
            Автоматика_АУП_выключена = 142,
            Отмена_пуска_АУП = 143,
            Тушение = 144,
            Аварийный_пуск_АУП = 145,
            Пуск_АУП = 146,
            Блокировка_пуска_АУП = 147,
            Автоматика_АУП_включена = 148,
            Взлом_корпуса_прибора = 149,
            Пуск_речевого_оповещения = 150,
            Отмена_пуска_РО = 151,
            Восстановление_корпуса_прибора = 152,
            ИУ_в_рабочем_состоянии_Клапан_приточно_вытяжной_вентиляции_или_дымоудаления_перешел_в_рабочее_состояние = 153,
            ИУ_в_исходном_состоянии_Клапан_приточно_вытяжной_вентиляции_или_дымоудаления_перешел_в_исходное_состояние = 154,
            Отказ_ИУ_Клапан_не_перешел_в_рабочее_или_исходное_состояние = 155,
            Ошибка_ИУ_Некорректное_состояние_цепей_контроля_клапана = 156,
            Сброс_задержки = 157,
            Восстановление_внутренней_зоны = 158,
            Задержка_пуска_РО = 159,
            Останов_задержки_пуска_АУП = 161,
            Увеличение_задержки_пуска = 162,
            Саботаж = 164,
            Ошибка_параметров_входа = 165,
            Требуется_замена_батареи = 186,
            Потеря_связи_со_входом = 187,
            Восстановление_связи_со_входом = 188,
            Потеря_связи_по_ДПЛС1 = 189,
            Потеря_связи_по_ДПЛС2 = 190,
            Восстановление_связи_по_ДПЛС1 = 191,
            Отключение_выходного_напряжения = 192,
            Подключение_выходного_напряжения = 193,
            Перегрузка_источника_питания = 194,
            Перегрузка_источника_питания_устранена = 195,
            Неисправность_зарядного_устройства = 196,
            Восстановление_зарядного_устройства = 197,
            Неисправность_источника_питания = 198,
            Восстановление_источника_питания = 199,
            Восстановление_батареи = 200,
            Восстановление_связи_по_ДПЛС2 = 201,
            Неисправность_батареи = 202,
            Перезапуск_прибора_Перезапуск_прибора = 203,
            Требуется_обслуживание = 204,
            Ошибка_теста_АКБ = 205,
            Понижение_температуры = 206,
            Батарея_разряжена = 211,
            Разряд_резервной_батареи = 212,
            Восстановление_резервной_батареи = 213,
            Короткое_замыкание_входа = 214,
            Короткое_замыкание_ДПЛС = 215,
            Сработка_датчика = 216,
            Отключение_ветви_RS_485_Отключение_прибора_от_одной_ветви_кольцевого_интерфейса_RS_485 = 217,
            Восстановление_ветви_RS_485_Восстановление_связи_с_прибором_по_ветви_кольцевого_интерфейса_RS485 = 218,
            Срабатывание_СДУ = 220,
            Отказ_СДУ = 221,
            Повышение_напряжения_ДПЛС = 222,
            Отметка_наряда_Срабатывание_цепи_контроля_наряда = 223,
            Некорректный_ответ_устройства_в_ДПЛС = 224,
            Неустойчивый_ответ_устройства_в_ДПЛС = 225,
            Задержка_пуска = 229,
            Останов_задержки_пуска_Остановка_задержки_активации_выхода = 230,
            Остановка_Остановка_выхода_пользователем = 231,
            Увеличение_задержки_пуска_Пользователь_продлил_начавшуюся_задержку_пуска_выхода = 232,
            Сброс_задержки_пуска = 233,
            Раздел_снят_по_принуждению_Раздел_снят_по_принуждению = 237,
            Раздел_взят_Раздел_взят_на_охрану = 241,
            Раздел_снят_Раздел_снят_с_охраны = 242,
            Окончание_локального_программирования_Выход_из_режима_программирования = 249,
            Потеряна_связь_с_прибором = 250,
            Восстановлена_связь_с_прибором = 251,
            Подмена_прибора_230 = 252,
            Включение_пульта_С2000М = 253,
            Прошел_день = 254,
            Прошел_час = 255,
        }

        public enum Type_Data
        {
            Порядковый_номер_пользователя_в_базе_данных_С2000_ПП = 1,
            Раздел_номер_раздела_Modbus = 2,
            Зона_порядковый_номер_зоны_Modbus = 3,
            Реле_порядковый_номер_реле_Modbus = 5,
            Реле_состояние_реле = 7,
            Время_и_дата_часы_минуты_секунды_день_месяц_год = 11,
            ID_раздела_идентификатор_раздела_Modbus = 24,

        }

        public enum States_Zone
        {
            Взятие_ШС = 24,
            Сзятие_ШС = 109,
            Включение_контроля_ШС = 111,
            Выкючение_контроля_ШС = 112,
            Отключение_Автоматики = 142,
            Сброс_Пуска_АСПТ = 143,
            Пуск_АСПТ = 146,
            Включение_Автоматики = 148,
        }


        public C2000_PP_Info(string IP_address, int UDP_Port, byte AddressOfDevices, int Speed) : base(IP_address, UDP_Port, AddressOfDevices, Speed)
        {
            if (Запрос_типа_и_версии_прибора() != "Not Device")
            {
                Max_Relay = ПолучитьЗапросМаксимальногоКоличестваРеле();
                Max_Zone = ПолучитьМаксимальноеКоличествоЗон();
                Max_Razdels = ЗапросМаксимальногоКоличестваРазделов();
                Max_State_Zone = ЗапросМаксимальногоКоличестваСостоянийЗоны();
                Max_State_Razdel = ЗапросМаксимальногоКоличестваСостоянийРаздела();
                Max_Size_Event = ЗапросМаксимальногоКоличестваСобытий();
                max_event_description_length = ЗапросМаксимальнойДлиныОписанияСобытия();
            }
        }

        public C2000_PP_Info()
        {

        }

        private Int16 ПолучитьЗапросМаксимальногоКоличестваРеле()
        {
            var WriteData = new List<byte> { 0xB4, 0x40, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, WriteData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }
        private Int16 ПолучитьМаксимальноеКоличествоЗон()
        {
            var writeData = new List<byte> { 0xB4, 0x41, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }

        private Int16 ЗапросМаксимальногоКоличестваРазделов()
        {
            var writeData = new List<byte> { 0xB4, 0x42, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }

        private Int16 ЗапросМаксимальногоКоличестваСостоянийЗоны()
        {
            var writeData = new List<byte> { 0xB4, 0x43, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }

        private Int16 ЗапросМаксимальногоКоличестваСостоянийРаздела()
        {
            var writeData = new List<byte> { 0xB4, 0x44, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }

        private Int16 ЗапросМаксимальногоКоличестваСобытий()
        {
            var writeData = new List<byte> { 0xB4, 0x45, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }

        private Int16 ЗапросМаксимальнойДлиныОписанияСобытия()
        {
            var writeData = new List<byte> { 0xB4, 0x46, 0, 1 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            return BitConverter.ToInt16(response[3..^2]);
        }
        public string Запрос_типа_и_версии_прибора()
        {
            var writeData = new List<byte> { 0xB4, 0x48, 0, 2 };
            var response = SendData(new PacketData(AddressOfDevices, ModbusFunctionCode.Чтение_значений_из_нескольких_регистров_хранения, writeData.ToArray()));
            this.DevicesType = "Not Device";
            if (response != null)
            {
                if (BitConverter.ToInt16(response[3..^4].Reverse().ToArray()) == 36)
                {
                    this.DevicesType = "C2000-PP";
                }
                DevicesVersion = BitConverter.ToInt16(response[5..^2]);
            }

            return DevicesType;
        }

        protected byte[] SendData(PacketData data)
        {
            UdpClient Client = new UdpClient(IP_address, UDP_Port);
            byte[] WriteData = data.ПолучитьПакетВВидеБайт();
            Client.Send(WriteData, WriteData.Length);
            Client.Close();
            Client = new UdpClient(UDP_Port);
            Task<UdpReceiveResult> Резулдьтат_Запроса = Client.ReceiveAsync();
            if (Резулдьтат_Запроса.Wait(120))
            {
                Client.Close();
                if (Резулдьтат_Запроса.Result.Buffer[1] > 20)
                {
                    //System.Console.WriteLine("Debug 1: " + string.Join('-', data.ПолучитьПакетВВидеБайт()));
                }
                //System.Console.WriteLine("DeBug 11: " + BitConverter.ToString(Резулдьтат_Запроса.Result.Buffer));
                return Резулдьтат_Запроса.Result.Buffer;

            }

            Client.Close();


            return null;
        }

        protected byte[] ConvertBoolArrayToByteArray(bool[] boolArray)
        {
            int byteCount = (boolArray.Length + 7) / 8; // Вычисляем количество байт

            byte[] byteArray = new byte[byteCount];

            for (int i = 0; i < boolArray.Length; i++)
            {
                if (boolArray[i])
                {
                    int byteIndex = i / 8;
                    int bitIndex = i % 8;
                    byteArray[byteIndex] |= (byte)(1 << (7 - bitIndex));
                }
            }

            return byteArray;
        }

        protected byte[] ConvertInt_Byte_Reverse(int GetInt)
        {
            ushort ushortNumbe = (ushort)GetInt;
            byte[] BytesNumbe = BitConverter.GetBytes(ushortNumbe);
            if (BytesNumbe[0] <= BytesNumbe[1])
            {
                BytesNumbe = BytesNumbe.Reverse().ToArray();
            }
            return BytesNumbe;
        }

        protected ushort ConvertByte_ushort_Reverse(byte[] Getbyte)
        {
            return BitConverter.ToUInt16(Getbyte.Reverse().ToArray());
        }
        protected short ConvertByte_short_Reverse(byte[] Getbyte)
        {

            return BitConverter.ToInt16(Getbyte.Reverse().ToArray());
        }

        public class Event_System : C2000_PP_Info
        {
            public ushort Size_Event_Info;
            public ushort Nambe_event;
            public States Event_State;
            public Event_System(byte[] Get_Data)
            {
                Nambe_event = ConvertByte_ushort_Reverse(Get_Data[0..2]);
                Size_Event_Info = Get_Data[2];
                Event_State = (States)Get_Data[3];

            }


        }
    }
}